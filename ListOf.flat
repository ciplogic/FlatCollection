flat Point3D {
  X, Y, Z: int
}

class ListOf<T> {
    define {
        TValue = T.valueType
        countFields=T.countFields
    }

    var {
        TValue[] _data
        int _size
        int _capacity
    }
    const {
        int ItemCount = countFields
    }
    sub initialize {
        setCapacity(10);
    }
    sub initialize(int capacity) {
        setCapacity(capacity);
    }

    sub setCapacity(int newSize){
            int capacity = newSize*ItemCount;
            if capacity <= 0 {
                capacity = 10*ItemCount;
            }
            if _data == null {
                _data = new T[capacity];
            } else {
                _data = Arrays.copyOf(_data, capacity);
            }
            _capacity = newSize;
        }

    sub getCursor(): FlatCursor@T {
        return new FlatCursor@T(this, _size)
    }

    sub clear() {
        _size = 0
    }

    sub add(){
        _size ++
        if(_capacity < _size){
            setCapacity(2*_capacity)
        }
    }
    sub set(int index, T value){
        _data[index]=value
    }

    sub T get(int index){
        return _data[index]
    }
}

class FlatCursor<T> {
  define {
        TValue = T.valueType
        countFields=T.countFields
        fieldNames = T.fieldNames
        index = 0
    }

    validate {
        countFields > 0
    }

var {
    final ArrayListOf<T> _list;
    int _size;
    int _offset;
}
const {
    int ItemCount = countFields;
}

    sub initialize(ArrayListOf<T> list, int size){
        _list = list;
        _offset = -ItemCount;
        _size = size*ItemCount;
    }

    sub add {
        _list.add();
        move();
    }

    sub indexSet(int pos){
        _offset = ItemCount*pos;
    }

    sub move(){
        _offset = _offset + ItemCount;
        return _offset < _size;
    }



    }

    each fieldNames -> fieldName, index {

            sub set@fieldName (TValue value) {
                _list.set(_offset+ index,  value);
            }

            sub TValue get@fieldName () {
                return _list.get(_offset+index)
            }
    }

}


specialize ListOf { Point3D }