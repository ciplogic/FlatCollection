Parameters: packageName, typeName, valueType
package {{packageName}};

import java.util.Arrays;

public class BuilderOf{{typeName}} {
    {{valueType}}[] _data;
    int _size;
    int _capacity;

    public BuilderOf{{typeName}}() {
        setCapacity(10);
    }

    public BuilderOf{{typeName}}(int capacity) {
    setCapacity(capacity);
    }

    public void setCapacity(int newSize){
        int capacity = newSize;
        if(capacity <= 0) {
            capacity = 10;
        }
        if(_data == null){
            _data = new {{valueType}}[capacity];
        }else {
            _data = Arrays.copyOf(_data, capacity);
        }
        _capacity = newSize;
    }

    public void clear() {
        _size = 0;
    }

    private void doubleCapacity() {
        int newCapacity = 2 * _capacity;
        setCapacity(newCapacity);
    }

    public void add({{valueType}} value){
        _size ++;
        if(_capacity < _size){
            doubleCapacity();
        }
        set(_size-1, value);
    }

    public void set(int index, {{valueType}} value){
        _data[index]=value;
    }

    public {{valueType}} get(int index){
        return _data[index];
    }

    public {{valueType}}[] toArray(){
        return Arrays.copyOf(_data, _size);
    }

    public void forEach(BuilderOf{{typeName}}Iterator acceptor) {
        for(int index = 0; index < _size; index++) {
            acceptor.accept(index, _data[index]);
        }
    }

    public void addRange({{valueType}}[] source, int start, int end) {
        while (_size+(end-start+1)>= _capacity){
            doubleCapacity();
        }
        System.arraycopy(source, start, _data, _size, end-start);
        _size += end-start;

    }
}
